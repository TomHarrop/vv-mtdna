#!/usr/bin/env bash

# mitobim function for safely CD'ing
# run_mitobim mitobimpath mirapath outdir readpool quick identifier
run_mitobim() {
  
  # original directory
  wd="$(pwd)"

  # get filepaths
  mitobimpath=$(readlink -f "${1}")
  mirapath=$(readlink -f "${2}")
  working_dir=$(readlink -f "${3}")
  readpool=$(readlink -f "${4}")
  quick=$(readlink -f "${5}")
  identifier="${6}"

  # change to output directory
  if [[ ! -d "${working_dir}" ]]; then
    mkdir -p "${working_dir}"
  fi
  cd "${working_dir}" || exit 1
  printf "Changed to working_dir\n%s\n" "$(pwd)"

  # build command
  cmd=( "${mitobimpath}" 
            --mirapath "${mirapath}"
            --NFS_warn_only
            -sample "Vvul"
            -ref "${identifier}"
            -readpool "${readpool}"
            -quick "${quick}"
            -end 50
            --min_cov 75
            --min_len 477 
            --denovo --paired --clean )

  shopt -s extglob
  printf "Final command line: "
  printf "%s " "${cmd[@]//+([[:blank:]])/ }"
  printf "\n"
  shopt -u extglob

  # run job
  log_file="${working_dir}/mitobim.log.txt"

  # run job
  srun --ntasks=1 --cpus-per-task=1 --exclusive \
      --output="${log_file}" "${cmd[@]}" &

  # return to wd
  cd "${wd}" || exit 1
  printf "Returned to original directory\n%s\n" "$(pwd)"

}

# set up
printf "[ %s: Run MITObim ]\n" \
    "$(date)"

mitobim="bin/mitobim/MITObim.pl"
mira_folder="bin/mitobim/docker/external_software/mira_4.0.2"

# shellcheck disable=SC1091
source "src/sh/bash_header"
# shellcheck disable=SC1091
source "src/sh/io_parser"

# make outdir
outdir="$(dirname "${other_output}")"
if [[ ! -d "${outdir}" ]]; then
    mkdir -p "${outdir}"
fi

# generate a sample name
identifier=$(basename "${input_fa%%.*}")

# run mitobim 
run_mitobim \
  "${mitobim}" \
  "${mira_folder}" \
  "${outdir}" \
  "${input_fq}" \
  "${input_fa}" \
  "${identifier}" &

printf "[ %s: Waiting for mitobim to finish ]\n" "$(date)"
FAIL=0
fail_wait

# log metadata
metadata_file="${outdir}/mitobim.METADATA.csv"

printf "[ %s: Logging metadata ]\n" "$(date)"
printf "metadata_file: %s\n" "${metadata_file}"
cat <<- _EOF_ > "${metadata_file}"
    Script,${0}
    branch,$(git rev-parse --abbrev-ref HEAD)
    hash,$(git rev-parse HEAD)
    date,$(date +%F)
    mitobim version,$("${mitobim}" --version 2>&1 | sed '4q;d')
    mira version,$("${mira_folder}/mira" -v)
_EOF_

printf "[ %s: Done ]\n" "$(date)"

exit 0
